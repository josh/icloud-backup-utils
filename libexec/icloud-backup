#!/bin/bash
# Usage: icloud-backup ~/Backup

set -e

abs_dirname() {
  local cwd="$PWD"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(readlink "$name" || true)"
  done

  pwd
  cd "$cwd"
}

bin_path="$(abs_dirname "$0")"
export PATH="${bin_path}:${PATH}"

DIR="$1"

case "$DIR" in
--help | -h )
  sed -ne '/^#/!q;s/.\{1,2\}//;1d;p' < "$0"
  exit 0
  ;;
'' )
  "$0" --help | head -1 >&2
  exit 1
  ;;
esac

TAR="$DIR/$(date +'%Y-%m-%d') iCloud Backup.tar"

rm -rf /tmp/Backup
mkdir -p /tmp/Backup/Notes

osascript -l JavaScript <<'JS'
ObjC.import("stdlib");
ObjC.import("Foundation");

var app = Application.currentApplication();
app.includeStandardAdditions = true;

const Finder = Application("Finder");
const Notes = Application("Notes");

const FileManager = $.NSFileManager.defaultManager;

function run() {
  const output = "/tmp/Backup/Notes";
  const tmpdir = "/tmp/Notes";

  FileManager.createDirectoryAtPathWithIntermediateDirectoriesAttributesError(
    tmpdir,
    true,
    {},
    null
  );
  FileManager.changeCurrentDirectoryPath(tmpdir);

  for (const note of Notes.notes()) {
    writeToFile(`${tmpdir}/${note.name()}.html`, note.body());
  }

  if (output.match(/.zip$/)) {
    $.system(`zip -r "${output}" .`);
  } else if (output.match(/.(tgz|gz)$/)) {
    $.system(`tar -cvzf "${output}" .`);
  } else {
    $.system(`cp -R . "${output}"`);
  }

  FileManager.changeCurrentDirectoryPath("/");
  FileManager.removeItemAtPathError(tmpdir, null);
}

function writeToFile(filename, data) {
  const str = $.NSString.alloc.initWithUTF8String(data);
  str.writeToFileAtomicallyEncodingError(
    filename,
    true,
    $.NSUTF8StringEncoding,
    null
  );
}
JS

set -x
mkdir -p "$DIR"
tar -v -r -f "$TAR" -C "$HOME" "Desktop"
tar -v -r -f "$TAR" -C "$HOME" "Documents"
tar -v -r -f "$TAR" -C "$HOME/Library" "Mobile Documents"
tar -v -r -f "$TAR" -C "$HOME/Library" "Keychains"
tar -v -r -f "$TAR" -C "/tmp/Backup" "Notes"
gzip -f "$TAR"
